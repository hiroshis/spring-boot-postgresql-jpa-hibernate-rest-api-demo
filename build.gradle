buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
		jacocoVersion     = '0.7.9'
		sonarqubeVersion  = '2.6'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// SonarQubeプラグイン
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}

[compileJava,compileTestJava]*.options*.encoding='UTF-8'

dependencies {
//	compile group: 'net.bull.javamelody', name: 'javamelody-spring-boot-starter', version: '1.72.0'
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web') {
	    exclude(module: 'spring-boot-starter-tomcat')
	    exclude(group: 'org.apache.tomcat.embed')
	}
	providedCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat')
	runtime('org.postgresql:postgresql')
	compile 'io.springfox:springfox-swagger2:2.9.0'
	compile 'io.springfox:springfox-swagger-ui:2.9.0'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

test {
	ignoreFailures = true
}

sonarqube {
	properties {
		property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
	}
}

jacoco {
	toolVersion = jacocoVersion
}
